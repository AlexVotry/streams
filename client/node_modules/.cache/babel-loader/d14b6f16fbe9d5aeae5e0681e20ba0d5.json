{"ast":null,"code":"import _slicedToArray from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alex/react-practice/react-udemy/streams/client/src/components/streams/StreamCreate.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreamCreate, _Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n    value: function renderInput(_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      // {input} is from formProps.input\n      // formProps comes from the Field component props.\n      console.log('meta: ', meta);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {// console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        label: \"Enter Title\",\n        component: this.renderInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        label: \"Enter Description\",\n        component: this.renderInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(Component);\n\nvar validate = function validate(formValues) {\n  var error = {};\n\n  var _arr = Object.entries(formValues);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var _ref4 = _arr[_i];\n\n    var _ref3 = _slicedToArray(_ref4, 2);\n\n    var key = _ref3[0];\n    var value = _ref3[1];\n    console.log('formValues:', formValues[key]);\n\n    if (!formValues[key]) {\n      error[key] = \"You must enter a \".concat(key);\n    }\n  }\n\n  console.log('errors:', error); // if (!formValues.title) {\n  //     errors.title = 'you must provide a title';\n  // }\n\n  return error;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/home/alex/react-practice/react-udemy/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Component","Field","reduxForm","StreamCreate","input","label","meta","console","log","formValues","props","handleSubmit","onSubmit","renderInput","validate","error","Object","entries","key","value","form"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,Y;;;;;;;;;;;;;sCAEkC;AAAA,UAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,UAAfC,KAAe,QAAfA,KAAe;AAAA,UAARC,IAAQ,QAARA,IAAQ;AAChC;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AAEA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,CADJ;AAMH;;;6BAEQK,U,EAAY,CACjB;AACH;;;6BAEQ;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,KAAK,EAAC,aAA1B;AAAwC,QAAA,SAAS,EAAE,KAAKC,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,KAAK,EAAC,mBAAhC;AAAoD,QAAA,SAAS,EAAE,KAAKA,WAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,IAAI,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ;AAOH;;;;EA3BsBb,S;;AA8B3B,IAAMc,QAAQ,GAAG,SAAXA,QAAW,CAACL,UAAD,EAAgB;AAC7B,MAAMM,KAAK,GAAG,EAAd;;AAD6B,aAGJC,MAAM,CAACC,OAAP,CAAeR,UAAf,CAHI;;AAG7B,2CAAqD;AAAA;;AAAA;;AAAA,QAA3CS,GAA2C;AAAA,QAAtCC,KAAsC;AACjDZ,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,UAAU,CAACS,GAAD,CAArC;;AACA,QAAG,CAACT,UAAU,CAACS,GAAD,CAAd,EAAqB;AACjBH,MAAAA,KAAK,CAACG,GAAD,CAAL,8BAAiCA,GAAjC;AACH;AACJ;;AACDX,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBO,KAAvB,EAT6B,CAW7B;AACA;AACA;;AAEA,SAAOA,KAAP;AACH,CAhBD;;AAkBA,eAAeb,SAAS,CAAC;AACrBkB,EAAAA,IAAI,EAAE,cADe;AAErBN,EAAAA,QAAQ,EAARA;AAFqB,CAAD,CAAT,CAGZX,YAHY,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends Component {\n\n    renderInput({ input, label, meta }) {\n        // {input} is from formProps.input\n        // formProps comes from the Field component props.\n        console.log('meta: ', meta);\n        \n        return (\n            <div>\n                <label>{label}</label>\n                <input {...input} />\n            </div>\n        )\n    }\n\n    onSubmit(formValues) {\n        // console.log(formValues);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\n                <Field name=\"title\" label=\"Enter Title\" component={this.renderInput} />\n                <Field name=\"description\" label=\"Enter Description\" component={this.renderInput} />\n                <button className=\"primary\" type=\"submit\">Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const error = {};\n\n    for (let [key, value] of Object.entries(formValues)) {\n        console.log('formValues:', formValues[key]);\n        if(!formValues[key]) {\n            error[key] = `You must enter a ${key}`;\n        }\n    }\n    console.log('errors:', error);\n\n    // if (!formValues.title) {\n    //     errors.title = 'you must provide a title';\n    // }\n    \n    return error;\n}\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}