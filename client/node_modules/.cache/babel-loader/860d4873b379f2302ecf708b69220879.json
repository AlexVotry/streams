{"ast":null,"code":"import _classCallCheck from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alex/react-practice/react-udemy/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alex/react-practice/react-udemy/streams/client/src/components/streams/StreamCreate.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreamCreate, _Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      // {input} is from formProps.input\n      // formProps comes from the Field component props.\n      console.log('meta: ', meta);\n      var error = input.error ? \"error\" : \"\";\n      return React.createElement(\"div\", {\n        className: \"field {error}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var touched = _ref2.touched,\n          error = _ref2.error;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {// console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        label: \"Enter Title\",\n        component: this.renderInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        label: \"Enter Description\",\n        component: this.renderInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'you must provide a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'you must provide a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/home/alex/react-practice/react-udemy/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Component","Field","reduxForm","StreamCreate","renderInput","input","label","meta","console","log","error","renderError","touched","formValues","props","handleSubmit","onSubmit","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,Y;;;;;;;;;;;;;;;;;;UAYFC,W,GAAc,gBAA4B;AAAA,UAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,UAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACtC;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AACA,UAAMG,KAAK,GAAGL,KAAK,CAACK,KAAN,GAAc,OAAd,GAAwB,EAAtC;AAEA,aACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQJ,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,MAAKM,WAAL,CAAiBJ,IAAjB,CAHL,CADJ;AAQH,K;;;;;;;uCAxB+B;AAAA,UAAlBK,OAAkB,SAAlBA,OAAkB;AAAA,UAATF,KAAS,SAATA,KAAS;;AAC5B,UAAGE,OAAO,IAAIF,KAAd,EAAqB;AACjB,eACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBA,KAAzB,CADJ,CADJ;AAKH;AACJ;;;6BAmBQG,U,EAAY,CACjB;AACH;;;6BAEQ;AACL,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,KAAK,EAAC,aAA1B;AAAwC,QAAA,SAAS,EAAE,KAAKZ,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,KAAK,EAAC,mBAAhC;AAAoD,QAAA,SAAS,EAAE,KAAKA,WAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,IAAI,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ;AAOH;;;;EAzCsBJ,S;;AA4C3B,IAAMiB,QAAQ,GAAG,SAAXA,QAAW,CAACJ,UAAD,EAAgB;AAC7B,MAAMK,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,0BAAf;AACH;;AACD,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,gCAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAXD;;AAaA,eAAehB,SAAS,CAAC;AACrBmB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA,QAAQ,EAARA;AAFqB,CAAD,CAAT,CAGZd,YAHY,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends Component {\n\n    renderError({ touched, error }) {\n        if(touched && error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({ input, label, meta }) => {\n        // {input} is from formProps.input\n        // formProps comes from the Field component props.\n        console.log('meta: ', meta);\n        const error = input.error ? \"error\" : \"\";\n        \n        return (\n            <div className=\"field {error}\">\n                <label>{label}</label>\n                <input {...input} autoComplete=\"off\"/>\n                {this.renderError(meta)}\n                \n            </div>\n        )\n    }\n\n\n    onSubmit(formValues) {\n        // console.log(formValues);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field name=\"title\" label=\"Enter Title\" component={this.renderInput} />\n                <Field name=\"description\" label=\"Enter Description\" component={this.renderInput} />\n                <button className=\"primary\" type=\"submit\">Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.title) {\n        errors.title = 'you must provide a title';\n    }\n    if (!formValues.description) {\n        errors.description = 'you must provide a description';\n    }\n    \n    return errors;\n}\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}